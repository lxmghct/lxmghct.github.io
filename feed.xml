<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-08-15T04:43:05+00:00</updated><id>/feed.xml</id><title type="html">lxmghct’s blog</title><subtitle>学习、实践、分享&lt;br&gt; Learning, Practicing, Sharing</subtitle><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><entry><title type="html">linux umount报错目标忙</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/30/linux-umount%E6%8A%A5%E9%94%99%E7%9B%AE%E6%A0%87%E5%BF%99.html" rel="alternate" type="text/html" title="linux umount报错目标忙" /><published>2024-07-30T06:00:00+00:00</published><updated>2024-07-30T06:00:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/30/linux%20umount%E6%8A%A5%E9%94%99%E7%9B%AE%E6%A0%87%E5%BF%99</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/30/linux-umount%E6%8A%A5%E9%94%99%E7%9B%AE%E6%A0%87%E5%BF%99.html"><![CDATA[<p>我在Kylin10系统上挂载了一个目录，然后想要卸载这个目录，但是执行<code class="language-plaintext highlighter-rouge">umount</code>命令时报错：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>umount: /mnt: 目标忙
</code></pre></div></div>

<p>这是因为有进程在使用这个目录，可以使用<code class="language-plaintext highlighter-rouge">fuser</code>命令查看：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fuser <span class="nt">-mv</span> /mnt
</code></pre></div></div>

<p>然后可以使用<code class="language-plaintext highlighter-rouge">kill</code>命令杀死这个进程：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">kill</span> <span class="nt">-9</span> 1234
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="linux" /><summary type="html"><![CDATA[我在Kylin10系统上挂载了一个目录，然后想要卸载这个目录，但是执行umount命令时报错：]]></summary></entry><entry><title type="html">nginx配置上传文件大小限制</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/29/nginx%E9%85%8D%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6.html" rel="alternate" type="text/html" title="nginx配置上传文件大小限制" /><published>2024-07-29T05:30:00+00:00</published><updated>2024-07-29T05:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/29/nginx%E9%85%8D%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/29/nginx%E9%85%8D%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6.html"><![CDATA[<p>前端上传文件报错：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>the server responded with a status of 413(Request Entity Too Large)
</code></pre></div></div>

<p>解决方法是在 nginx 配置文件中添加 <code class="language-plaintext highlighter-rouge">client_max_body_size</code> 配置项，如下：</p>
<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">http</span>{
    <span class="n">client_max_body_size</span> <span class="m">50</span><span class="n">M</span>;
}
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="nginx" /><summary type="html"><![CDATA[前端上传文件报错： the server responded with a status of 413(Request Entity Too Large)]]></summary></entry><entry><title type="html">HBuilderX启动微信小程序报错：Cannot read property ‘forceUpdate‘ of undefined</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/26/HBuilderX%E5%90%AF%E5%8A%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99.html" rel="alternate" type="text/html" title="HBuilderX启动微信小程序报错：Cannot read property ‘forceUpdate‘ of undefined" /><published>2024-07-26T11:30:00+00:00</published><updated>2024-07-26T11:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/26/HBuilderX%E5%90%AF%E5%8A%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/26/HBuilderX%E5%90%AF%E5%8A%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99.html"><![CDATA[<h2 id="报错1">报错1</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ app.json 文件内容错误] app.json: 未找到 ["sitemapLocation"] 对应的 sitemap.json 文件(env: Windows,mp,1.05.2203070; lib: 3.5.0)
</code></pre></div></div>

<p>解决方法：在微信开发者工具中重新编译小程序，如果还是报错就在啊HBuilderX中重新启动微信小程序。具体原因未知。</p>

<h2 id="报错2">报错2</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cannot read property ‘forceUpdate‘ of undefined
</code></pre></div></div>
<p>参考: <a href="https://blog.csdn.net/qq_40907752/article/details/107710357">https://blog.csdn.net/qq_40907752/article/details/107710357</a></p>

<p>解决方法：如果微信开发者工具是游客模式，则使用自己的微信登录，并在manifest.json中把自己创建的小程序id填入。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="微信小程序" /><summary type="html"><![CDATA[报错1 [ app.json 文件内容错误] app.json: 未找到 ["sitemapLocation"] 对应的 sitemap.json 文件(env: Windows,mp,1.05.2203070; lib: 3.5.0)]]></summary></entry><entry><title type="html">使用vscode开发UE5.3</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/25/%E4%BD%BF%E7%94%A8vscode%E5%BC%80%E5%8F%91UE5.3.html" rel="alternate" type="text/html" title="使用vscode开发UE5.3" /><published>2024-07-25T07:30:00+00:00</published><updated>2024-07-25T07:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/25/%E4%BD%BF%E7%94%A8vscode%E5%BC%80%E5%8F%91UE5.3</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/25/%E4%BD%BF%E7%94%A8vscode%E5%BC%80%E5%8F%91UE5.3.html"><![CDATA[<p>参考链接：</p>

<p><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/setting-up-visual-studio-code-for-unreal-engine">UE官方文档: 为虚幻引擎设置VS Code</a></p>

<p><a href="https://www.bilibili.com/video/BV1PF4m1j72Z/?vd_source=29cb3c67cf132b55115fce33665977c7">B站视频: 为虚幻引擎设置VS Code</a></p>

<h2 id="1-配置ue53">1. 配置UE5.3</h2>
<p>使用UE5.3打开任意项目，然后在编辑器中点击<code class="language-plaintext highlighter-rouge">编辑</code>-&gt;<code class="language-plaintext highlighter-rouge">编辑器偏好设置</code>-&gt;<code class="language-plaintext highlighter-rouge">源代码</code>，将<code class="language-plaintext highlighter-rouge">源代码编辑器</code>设置为<code class="language-plaintext highlighter-rouge">Visual Studio Code</code>。</p>

<p>配置好后重启UE，然后新创建的项目将会使用vscode作为源代码编辑器，并且项目根目录的.vscode文件夹中会生成一些配置文件。</p>

<h2 id="2-安装vscode插件">2. 安装vscode插件</h2>
<p>在vscode中安装以下插件：</p>
<ul>
  <li>Unreal Engine 4 Snippets (该插件对UE5也适用)</li>
  <li>C/C++</li>
</ul>

<h2 id="3-配置vscode文件夹">3. 配置.vscode文件夹</h2>
<p>编辑项目根目录的.vscode/c_cpp_properties.json文件，可以参考开头的官方文档中的配置。下面是我使用的配置，这里面的<code class="language-plaintext highlighter-rouge">includePath</code>和<code class="language-plaintext highlighter-rouge">defines</code>是按开头的视频里添加的，不加似乎也可以运行。</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testEditor Editor Win64 Development (test)"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"compilerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">IDE</span><span class="se">\\</span><span class="s2">Microsoft Visual Studio</span><span class="se">\\</span><span class="s2">2022</span><span class="se">\\</span><span class="s2">Community</span><span class="se">\\</span><span class="s2">VC</span><span class="se">\\</span><span class="s2">Tools</span><span class="se">\\</span><span class="s2">MSVC</span><span class="se">\\</span><span class="s2">14.35.32215</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">Hostx64</span><span class="se">\\</span><span class="s2">x64</span><span class="se">\\</span><span class="s2">cl.exe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"cStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c17"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"cppStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c++20"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"intelliSenseMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"msvc-x64"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"compileCommands"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">projects</span><span class="se">\\</span><span class="s2">Unreal Projects</span><span class="se">\\</span><span class="s2">test</span><span class="se">\\</span><span class="s2">.vscode</span><span class="se">\\</span><span class="s2">compileCommands_test.json"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"${workspaceFolder}</span><span class="se">\\</span><span class="s2">Plugins**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"${workspaceFolder}</span><span class="se">\\</span><span class="s2">Source**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"${workspaceFolder}</span><span class="se">\\</span><span class="s2">Intermediate**"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"defines"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"UNICODE"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"_UNICODE"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"__UNREAL__"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"UBT_COMPILED_PLATFORM=Windows"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"WITH_ENGINE=1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"WITH_UNREAL_DEVELOPER_TOOLS=1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"WITH_APPLICATION_CORE=1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"WITH_COREUOBJECT=1"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Win32"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"compilerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">IDE</span><span class="se">\\</span><span class="s2">Microsoft Visual Studio</span><span class="se">\\</span><span class="s2">2022</span><span class="se">\\</span><span class="s2">Community</span><span class="se">\\</span><span class="s2">VC</span><span class="se">\\</span><span class="s2">Tools</span><span class="se">\\</span><span class="s2">MSVC</span><span class="se">\\</span><span class="s2">14.35.32215</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">Hostx64</span><span class="se">\\</span><span class="s2">x64</span><span class="se">\\</span><span class="s2">cl.exe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"cStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c17"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"cppStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c++20"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"intelliSenseMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"msvc-x64"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"compileCommands"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">projects</span><span class="se">\\</span><span class="s2">Unreal Projects</span><span class="se">\\</span><span class="s2">test</span><span class="se">\\</span><span class="s2">.vscode</span><span class="se">\\</span><span class="s2">compileCommands_Default.json"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="4-在vscode中运行项目">4. 在vscode中运行项目</h2>
<p>点击vscode左侧的<code class="language-plaintext highlighter-rouge">运行和调试</code>，顶部的运行配置中选择<code class="language-plaintext highlighter-rouge">Launch testEditor (Development)(工作区)</code>（我的项目名是<code class="language-plaintext highlighter-rouge">test</code>），然后点击绿色的三角形按钮或者按<code class="language-plaintext highlighter-rouge">F5</code>运行项目。
<img src="/post_assets/images/2024/07/25-run-ue-in-vscode.png" alt="image" /></p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="UE5" /><summary type="html"><![CDATA[参考链接：]]></summary></entry><entry><title type="html">nginx安装在root下的权限问题</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/21/nginx%E5%AE%89%E8%A3%85%E5%9C%A8root%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.html" rel="alternate" type="text/html" title="nginx安装在root下的权限问题" /><published>2024-07-21T11:30:00+00:00</published><updated>2024-07-21T11:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/21/nginx%E5%AE%89%E8%A3%85%E5%9C%A8root%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/21/nginx%E5%AE%89%E8%A3%85%E5%9C%A8root%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.html"><![CDATA[<h2 id="问题描述">问题描述</h2>

<p>nginx报403错误：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024/07/21 15:59:37 [error] 577147#0: *1 "/root/dev/nginx/html/index.html" is forbidden (13: Permission denied), client: xxx.xxx.xxx.xxx, server: localhost, request: "GET / HTTP/1.1", host: "xxx.xxx.xxx.xxx:8080"
</code></pre></div></div>

<p>403 Forbidden 错误通常表示 Nginx 服务器无法访问请求的文件或目录。错误的原因是权限被拒绝（13: Permission denied），可能是文件权限问题。</p>

<h2 id="解决方法">解决方法</h2>
<p>确保 Nginx 进程用户（通常是 www-data、nginx 或 apache）对 /root/dev/nginx/html/index.html 文件和它所在的目录具有读取权限。使用 chmod 和 chown 命令来调整权限和所有者。例如：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> www-data:www-data /root/dev/nginx/html
<span class="nb">sudo chmod</span> <span class="nt">-R</span> 755 /root/dev/nginx/html
</code></pre></div></div>
<p>但是上述方法仍然无法解决问题，因为root目录自身的权限问题。所以最终解决方法是将nginx安装在非root目录下，比如 /usr/local/nginx。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="nginx" /><summary type="html"><![CDATA[问题描述]]></summary></entry><entry><title type="html">spring判断swagger model中的required字段</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/spring%E5%88%A4%E6%96%ADswagger-model%E4%B8%AD%E7%9A%84required%E5%AD%97%E6%AE%B5.html" rel="alternate" type="text/html" title="spring判断swagger model中的required字段" /><published>2024-07-20T13:30:00+00:00</published><updated>2024-07-20T13:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/spring%E5%88%A4%E6%96%ADswagger%20model%E4%B8%AD%E7%9A%84required%E5%AD%97%E6%AE%B5</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/spring%E5%88%A4%E6%96%ADswagger-model%E4%B8%AD%E7%9A%84required%E5%AD%97%E6%AE%B5.html"><![CDATA[<p>swagger的<code class="language-plaintext highlighter-rouge">@ApiModelProperty</code>注解中有一个<code class="language-plaintext highlighter-rouge">required</code>字段，用来标识字段是否必填。在后端接口中，我们可能需要判断swagger model中的required字段是否为空。采用的方法是通过反射获取对象的所有字段，然后检查字段是否有<code class="language-plaintext highlighter-rouge">@ApiModelProperty</code>注解，如果有则判断<code class="language-plaintext highlighter-rouge">required</code>字段是否为<code class="language-plaintext highlighter-rouge">true</code>，如果为<code class="language-plaintext highlighter-rouge">true</code>则检查字段是否为空。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/**
     * 检查swagger的required字段
     * @param obj 对象
     * @return boolean
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkRequiredFields</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 获取对象的所有字段</span>
        <span class="nc">Field</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredFields</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 检查字段是否有@ApiModelProperty注解</span>
            <span class="nc">ApiModelProperty</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">ApiModelProperty</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">annotation</span><span class="o">.</span><span class="na">required</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="c1">// 检查字段是否为空</span>
                    <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="spring" /><category term="swagger" /><summary type="html"><![CDATA[swagger的@ApiModelProperty注解中有一个required字段，用来标识字段是否必填。在后端接口中，我们可能需要判断swagger model中的required字段是否为空。采用的方法是通过反射获取对象的所有字段，然后检查字段是否有@ApiModelProperty注解，如果有则判断required字段是否为true，如果为true则检查字段是否为空。]]></summary></entry><entry><title type="html">neo4j获取某个查询结果的索引</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/neo4j%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%B4%A2%E5%BC%95.html" rel="alternate" type="text/html" title="neo4j获取某个查询结果的索引" /><published>2024-07-20T11:30:00+00:00</published><updated>2024-07-20T11:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/neo4j%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%B4%A2%E5%BC%95</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/20/neo4j%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%B4%A2%E5%BC%95.html"><![CDATA[<p>我想在 neo4j 中获取某个查询结果的索引，比如我想获取某个 personName 在所有查询结果中的索引。返回所有数据后再在程序中进行处理是一种方法，但是如果查询结果较大，这种方法就不太适用了。下面是在 spring-data-neo4j 中的实现。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"MATCH (p:BaseNode:Person) "</span> <span class="o">+</span>
            <span class="s">"WITH p ORDER BY p.nodeId "</span> <span class="o">+</span>
            <span class="s">"WITH COLLECT(p) AS persons "</span> <span class="o">+</span>
            <span class="s">"UNWIND RANGE(0, SIZE(persons) - 1) AS idx "</span> <span class="o">+</span>
            <span class="s">"WITH persons[idx] AS person, idx "</span> <span class="o">+</span>
            <span class="s">"WHERE person.name = {personName} "</span> <span class="o">+</span>
            <span class="s">"RETURN idx"</span><span class="o">)</span>
    <span class="nc">Integer</span> <span class="nf">getPersonIndex</span><span class="o">(</span><span class="nc">String</span> <span class="n">personName</span><span class="o">);</span>
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="neo4j" /><summary type="html"><![CDATA[我想在 neo4j 中获取某个查询结果的索引，比如我想获取某个 personName 在所有查询结果中的索引。返回所有数据后再在程序中进行处理是一种方法，但是如果查询结果较大，这种方法就不太适用了。下面是在 spring-data-neo4j 中的实现。]]></summary></entry><entry><title type="html">neo4j截取字符串</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/18/neo4j%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2.html" rel="alternate" type="text/html" title="neo4j截取字符串" /><published>2024-07-18T02:30:00+00:00</published><updated>2024-07-18T02:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/18/neo4j%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/18/neo4j%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2.html"><![CDATA[<p>我想在 neo4j 中将文章的前50个字符作为摘要保存到关系中，如果前50个字符中有句号或者问号，就截取到句号或者问号的位置。下面是在 spring-data-neo4j 中的实现。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Query</span><span class="o">(</span><span class="s">"UNWIND {linkList} AS link "</span> <span class="o">+</span>
            <span class="s">"MATCH (a:BaseNode:Article {nodeId: link.articleId}) "</span> <span class="o">+</span>
            <span class="s">"MATCH (n:BaseNode:Document {nodeId: link.documentId}) "</span> <span class="o">+</span>
            <span class="s">"MERGE (n)-[r:reference]-&gt;(a) "</span> <span class="o">+</span>
            <span class="s">"WITH n, r, a, substring(a.content, 0, 50) AS initialSnippet, "</span> <span class="o">+</span>
            <span class="s">"replace(replace(substring(a.content, 0, 50), '。', '|'), '？', '|') AS markedSnippet "</span> <span class="o">+</span>
            <span class="s">"WITH n, r, a, initialSnippet, markedSnippet, split(markedSnippet, '|')[0] AS summaryEnd "</span> <span class="o">+</span>
            <span class="s">"SET r.summary = CASE WHEN summaryEnd IS NULL THEN initialSnippet ELSE substring(initialSnippet, 0, size(summaryEnd) + 1) END"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">linkArticleToDocument</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">linkList</span><span class="o">);</span>
</code></pre></div></div>

<p>实现思路是先将文章的前50个字符保存到<code class="language-plaintext highlighter-rouge">initialSnippet</code>中，然后将其中的句号和问号替换为<code class="language-plaintext highlighter-rouge">|</code>，然后使用<code class="language-plaintext highlighter-rouge">split</code>函数按<code class="language-plaintext highlighter-rouge">|</code>分割并取第一个元素。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="neo4j" /><summary type="html"><![CDATA[我想在 neo4j 中将文章的前50个字符作为摘要保存到关系中，如果前50个字符中有句号或者问号，就截取到句号或者问号的位置。下面是在 spring-data-neo4j 中的实现。]]></summary></entry><entry><title type="html">UE5创建项目时报错No available Windows SDKs found</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/17/UE5%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99No-available-Windows-SDKs-found.html" rel="alternate" type="text/html" title="UE5创建项目时报错No available Windows SDKs found" /><published>2024-07-17T07:00:00+00:00</published><updated>2024-07-17T07:00:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/17/UE5%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99No%20available%20Windows%20SDKs%20found</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/17/UE5%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99No-available-Windows-SDKs-found.html"><![CDATA[<h2 id="问题描述">问题描述</h2>
<p>我在使用UE5.3创建一个空白的游戏项目时，报了下面的错：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running D:/IDE/Epic Games/UE_5.3/Engine/Build/BatchFiles/Build.bat  -projectfiles -project="D:/projects/Unreal Projects/tank/tank.uproject" -game -rocket -progress
Using bundled DotNet SDK version: 6.0.302
Running UnrealBuildTool: dotnet "..\..\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.dll" -projectfiles -project="D:/projects/Unreal Projects/tank/tank.uproject" -game -rocket -progress
Log file: C:\Users\lxm\AppData\Local\UnrealBuildTool\Log_GPF.txt

Some Platforms were skipped due to invalid SDK setup: Win64.
See the log file for detailed information


Generating VisualStudio project files:
Discovering modules, targets and source code for project...
No available Windows SDKs found
Windows SDK must be installed in order to build this target.
</code></pre></div></div>

<h2 id="解决方法">解决方法</h2>
<p>打开Microsoft Visual Studio Installer，修改安装，找到单个组件中的<code class="language-plaintext highlighter-rouge">Windows 10 SDK</code>，安装即可。
<img src="/post_assets/images/2024/07/17-vs-intaller-win10-sdk.png" alt="image" /></p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="UE5" /><summary type="html"><![CDATA[问题描述 我在使用UE5.3创建一个空白的游戏项目时，报了下面的错：]]></summary></entry><entry><title type="html">nginx配置proxy_pass时出现no live upstreams while connecting to upstream</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/15/nginx%E9%85%8D%E7%BD%AEproxy_pass%E6%97%B6%E5%87%BA%E7%8E%B0no-live-upstreams-while-connecting-to-upstream.html" rel="alternate" type="text/html" title="nginx配置proxy_pass时出现no live upstreams while connecting to upstream" /><published>2024-07-15T06:00:00+00:00</published><updated>2024-07-15T06:00:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/15/nginx%E9%85%8D%E7%BD%AEproxy_pass%E6%97%B6%E5%87%BA%E7%8E%B0no%20live%20upstreams%20while%20connecting%20to%20upstream</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/15/nginx%E9%85%8D%E7%BD%AEproxy_pass%E6%97%B6%E5%87%BA%E7%8E%B0no-live-upstreams-while-connecting-to-upstream.html"><![CDATA[<h2 id="1-问题描述">1. 问题描述</h2>
<p>在 nginx 配置文件中有如下配置项:</p>
<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">location</span> /<span class="n">api</span> {
        <span class="n">proxy_pass</span>    <span class="n">http</span>://<span class="n">localhost</span>:<span class="m">8090</span>;
    }
</code></pre></div></div>
<p>前端访问 <code class="language-plaintext highlighter-rouge">/api</code> 时，有时候能正常访问，但有时候会出现 <code class="language-plaintext highlighter-rouge">502 Bad Gateway</code> 错误，查看 nginx 日志发现如下错误:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>no live upstreams while connecting to upstream
</code></pre></div></div>

<p>已确认过8090端口的服务是正常的，但是 nginx 有时候会出现这个错误。</p>

<h2 id="2-解决方法">2. 解决方法</h2>
<p>参考<a href="https://stackoverflow.com/questions/49767001/how-to-solve-nginx-no-live-upstreams-while-connecting-to-upstream-client">https://stackoverflow.com/questions/49767001/how-to-solve-nginx-no-live-upstreams-while-connecting-to-upstream-client</a></p>

<p>将 <code class="language-plaintext highlighter-rouge">proxy_pass</code> 中的<code class="language-plaintext highlighter-rouge">localhost</code>改为<code class="language-plaintext highlighter-rouge">127.0.0.1</code>即可解决问题。原因暂未深入研究。</p>

<p>根据 stackoverflow 上的回答来看，当在proxy_pass中使用localhost时，Nginx会依赖操作系统的DNS解析机制来解析这个主机名。localhost在不同的环境下可能解析为IPv4地址（127.0.0.1）或者IPv6地址（::1）。这取决于系统的DNS配置和优先级设置。当localhost解析为::1（IPv6地址）时，如果Nginx配置或后端服务没有正确处理IPv6请求或者绑定到IPv6端口，可能会导致连接失败。所以改成<code class="language-plaintext highlighter-rouge">127.0.0.1</code>可以让Nginx总是使用IPv4地址。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="nginx" /><summary type="html"><![CDATA[1. 问题描述 在 nginx 配置文件中有如下配置项: location /api { proxy_pass http://localhost:8090; } 前端访问 /api 时，有时候能正常访问，但有时候会出现 502 Bad Gateway 错误，查看 nginx 日志发现如下错误: no live upstreams while connecting to upstream]]></summary></entry><entry><title type="html">使用windows命令行连接neo4j</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/09/%E4%BD%BF%E7%94%A8windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5neo4j.html" rel="alternate" type="text/html" title="使用windows命令行连接neo4j" /><published>2024-07-09T08:00:00+00:00</published><updated>2024-07-09T08:00:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/09/%E4%BD%BF%E7%94%A8windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5neo4j</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/07/09/%E4%BD%BF%E7%94%A8windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5neo4j.html"><![CDATA[<h2 id="1-cmd命令提示符连接neo4jbat脚本">1. CMD命令提示符连接neo4j(bat脚本)</h2>
<p>使用下面的脚本可以连接到neo4j数据库，并执行cypher查询，将结果保存到一个文件中。</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
<span class="nb">setlocal</span> <span class="na">enabledelayedexpansion</span>

<span class="c">rem Neo4j credentials and host</span>
<span class="kd">set</span> <span class="kd">NEO4J_USER</span><span class="o">=</span><span class="kd">neo4j</span>
<span class="kd">set</span> <span class="kd">NEO4J_PASSWORD</span><span class="o">=</span><span class="kd">neo4j_password</span>
<span class="kd">set</span> <span class="kd">NEO4J_HOST</span><span class="o">=</span><span class="kd">localhost</span>
<span class="kd">set</span> <span class="kd">NEO4J_PORT</span><span class="o">=</span><span class="m">7475</span>

<span class="c">rem Backend URL</span>
<span class="kd">set</span> <span class="kd">BACKEND_URL</span><span class="o">=</span><span class="kd">http</span>://localhost:8089/audit/publishAuditNodes<span class="o">?</span><span class="kd">auditNodeIds</span><span class="o">=</span>

<span class="c">rem Temp file to store result</span>
<span class="kd">set</span> <span class="kd">RESULT_FILE</span><span class="o">=</span><span class="kd">cypher_result</span>.json

<span class="c">rem Cypher query</span>
<span class="kd">set</span> <span class="kd">CYPHER_QUERY</span><span class="o">=</span><span class="kd">MATCH</span> <span class="o">(</span><span class="kd">n</span><span class="nl">:Person</span><span class="o">)</span> <span class="se">^
</span><span class="kd">WHERE</span> <span class="kd">n</span>.name <span class="kd">CONTAINS</span> <span class="s1">'test'</span> <span class="se">^
</span><span class="kd">RETURN</span> <span class="kd">n</span>

<span class="c">rem Send Cypher request</span>
<span class="kd">set</span> <span class="kd">CYPHER_REQUEST</span><span class="o">=</span><span class="nb">curl</span> <span class="na">-u </span><span class="vm">%NEO4</span><span class="kd">J_USER</span><span class="err">%</span>:<span class="vm">%NEO4</span><span class="kd">J_PASSWORD</span><span class="err">%</span> <span class="na">-H </span><span class="s2">"Content-Type: application/json"</span> <span class="na">-d </span><span class="s2">"{\"</span><span class="kd">statements</span>\<span class="s2">":[{\"</span><span class="kd">statement</span>\<span class="s2">":\"</span><span class="nv">!CYPHER_QUERY!</span>\<span class="s2">"}]}"</span> <span class="kd">http</span>://<span class="vm">%NEO4</span><span class="kd">J_HOST</span><span class="err">%</span>:<span class="vm">%NEO4</span><span class="kd">J_PORT</span><span class="err">%</span><span class="na">/db/data/transaction/commit

</span><span class="nv">!CYPHER_REQUEST!</span> <span class="o">&gt;</span> <span class="nv">%RESULT_FILE%</span>

</code></pre></div></div>

<p>如果需要进一步对数据处理，可能需要另外安装jq工具。注意CMD命令的<code class="language-plaintext highlighter-rouge">SET /p</code>命令有长度限制（1024个字符），如果查询结果过长，想要保存到变量中得另外处理比如使用数组（参考: <a href="http://www.bathome.net/thread-17887-1-1.html">http://www.bathome.net/thread-17887-1-1.html</a>），这种情况就会比较麻烦。</p>

<h2 id="2-使用powershell连接neo4j">2. 使用powershell连接neo4j</h2>
<p>powershell 相比命令提示符更加强大，且没有上面的长度限制。可以使用下面的脚本连接neo4j。</p>

<p>比如我现在想从 neo4j 中读取出一些数据并传递给另一个后端服务，可以使用下面的脚本。当数据量较大时如果使用bat脚本就会出现下面的nodeIds被截断的情况，而powershell脚本则不会有这个问题。</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Neo4j credentials and host</span><span class="w">
</span><span class="nv">$NEO4J_USER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"neo4j"</span><span class="w">
</span><span class="nv">$NEO4J_PASSWORD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"1qaz@WSX"</span><span class="w">
</span><span class="nv">$NEO4J_HOST</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"localhost"</span><span class="w">
</span><span class="nv">$NEO4J_PORT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">7475</span><span class="w">

</span><span class="c"># Backend URL</span><span class="w">
</span><span class="nv">$BACKEND_URL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"http://localhost:8089/audit/publish?nodeIds="</span><span class="w">

</span><span class="c"># Cypher query</span><span class="w">
</span><span class="nv">$CYPHER_QUERY</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sh">@"
MATCH (n:Audit{label: 'Relationship', status: 3})
WITH n, apoc.convert.fromJsonMap(n.info) AS info
WHERE info.source = 'CBDB'
RETURN COLLECT(DISTINCT n.nodeId) AS nodeIds
"@</span><span class="w">

</span><span class="c"># Send Cypher request</span><span class="w">
</span><span class="nv">$CYPHER_REQUEST</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
    </span><span class="nx">Uri</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"http://</span><span class="nv">${NEO4J_HOST}</span><span class="s2">:</span><span class="nv">${NEO4J_PORT}</span><span class="s2">/db/data/transaction/commit"</span><span class="w">
    </span><span class="nx">Method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"POST"</span><span class="w">
    </span><span class="nx">Headers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
        </span><span class="s2">"Content-Type"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"application/json"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="nx">Body</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
        </span><span class="nx">statements</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@(@{</span><span class="nx">statement</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$CYPHER_QUERY</span><span class="p">})</span><span class="w">
    </span><span class="p">}</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="nx">ConvertTo</span><span class="err">-</span><span class="nx">Json</span><span class="w">
    </span><span class="nx">Credential</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">PSCredential</span><span class="p">]</span><span class="err">::</span><span class="nx">new</span><span class="err">(</span><span class="nv">$NEO4J_USER</span><span class="p">,</span><span class="w"> </span><span class="err">(</span><span class="nx">ConvertTo</span><span class="err">-</span><span class="nx">SecureString</span><span class="w"> </span><span class="nv">$NEO4J_PASSWORD</span><span class="w"> </span><span class="err">-</span><span class="nx">AsPlainText</span><span class="w"> </span><span class="err">-</span><span class="nx">Force</span><span class="err">))</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="nv">$response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Invoke-RestMethod</span><span class="w"> </span><span class="err">@</span><span class="nx">CYPHER_REQUEST</span><span class="w">

</span><span class="c"># Read nodeIds from response</span><span class="w">
</span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$nodeIds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">-join</span><span class="w"> </span><span class="s1">','</span><span class="w">
    </span><span class="c"># Output nodeIds</span><span class="w">
    </span><span class="n">Write-Output</span><span class="w"> </span><span class="s2">"NodeIds: </span><span class="nv">$nodeIds</span><span class="s2">"</span><span class="w">
    
    </span><span class="c"># Send POST request to backend</span><span class="w">
    </span><span class="nv">$BACKEND_REQUEST</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@{</span><span class="w">
        </span><span class="nx">Uri</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$BACKEND_URL$nodeIds</span><span class="s2">"</span><span class="w">
        </span><span class="nx">Method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"POST"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="n">Invoke-RestMethod</span><span class="w"> </span><span class="err">@</span><span class="nx">BACKEND_REQUEST</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Write-Output</span><span class="w"> </span><span class="s2">"Error parsing response: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="neo4j" /><summary type="html"><![CDATA[1. CMD命令提示符连接neo4j(bat脚本) 使用下面的脚本可以连接到neo4j数据库，并执行cypher查询，将结果保存到一个文件中。]]></summary></entry><entry><title type="html">饥荒切换离线与在线模式</title><link href="/%E5%85%B6%E4%BB%96%E5%AE%9E%E8%B7%B5/2024/07/02/%E9%A5%A5%E8%8D%92%E5%88%87%E6%8D%A2%E7%A6%BB%E7%BA%BF%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%A8%A1%E5%BC%8F.html" rel="alternate" type="text/html" title="饥荒切换离线与在线模式" /><published>2024-07-02T15:30:00+00:00</published><updated>2024-07-02T15:30:00+00:00</updated><id>/%E5%85%B6%E4%BB%96%E5%AE%9E%E8%B7%B5/2024/07/02/%E9%A5%A5%E8%8D%92%E5%88%87%E6%8D%A2%E7%A6%BB%E7%BA%BF%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="/%E5%85%B6%E4%BB%96%E5%AE%9E%E8%B7%B5/2024/07/02/%E9%A5%A5%E8%8D%92%E5%88%87%E6%8D%A2%E7%A6%BB%E7%BA%BF%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%A8%A1%E5%BC%8F.html"><![CDATA[<p>在游戏饥荒中，如果已经以离线或者在线模式创建了世界，就无法直接在游戏中切换离线与在线模式（比如有的时候想在没有网络的环境下玩之前创建的在线模式世界）。但是可以通过修改存档文件来实现。</p>

<p>存档路径: C:\Users\xxx\Documents\Klei\DoNotStarveTogether\xxxxxxx\</p>

<ul>
  <li>进入需要修改的存档文件夹，比如Cluster_1。</li>
  <li>打开Master/save/shardindex，修改server选项中的<code class="language-plaintext highlighter-rouge">online_mode</code>为<code class="language-plaintext highlighter-rouge">true</code>(在线模式)或<code class="language-plaintext highlighter-rouge">false</code>(离线模式)。</li>
  <li>打开Caves/save/shardindex，同上修改server选项中的<code class="language-plaintext highlighter-rouge">online_mode</code>。</li>
  <li>注意根目录下的cluster.ini文件中的<code class="language-plaintext highlighter-rouge">offline_cluster</code>的值对最终的结果没有影响，改不改都可以。</li>
</ul>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="其他实践" /><category term="饥荒" /><summary type="html"><![CDATA[在游戏饥荒中，如果已经以离线或者在线模式创建了世界，就无法直接在游戏中切换离线与在线模式（比如有的时候想在没有网络的环境下玩之前创建的在线模式世界）。但是可以通过修改存档文件来实现。]]></summary></entry><entry><title type="html">用户权限管理系统设计</title><link href="/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/06/16/%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html" rel="alternate" type="text/html" title="用户权限管理系统设计" /><published>2024-06-16T14:30:00+00:00</published><updated>2024-06-16T14:30:00+00:00</updated><id>/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/06/16/%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/06/16/%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html"><![CDATA[<h2 id="1-需求分析">1. 需求分析</h2>
<p>设计一个用户权限管理系统，模型为RBAC（Role-Based Access Control），按用户-角色-权限的层次结构进行权限管理。该项目的主要功能有：</p>

<ol>
  <li>权限管理部分
    <ul>
      <li>用户管理：用户的增删改查</li>
      <li>角色管理：角色的增删改查，给用户分配角色</li>
      <li>权限管理：给角色分配权限</li>
    </ul>
  </li>
  <li>权限控制部分
    <ul>
      <li>每次请求都需要校验用户的权限，只有拥有相应权限的用户才能访问相应资源</li>
      <li>用户的权限状态应当实时更新，比如退出登录、长时间未操作、修改密码等敏感信息、角色或权限变更等情况都应当立即生效并使旧的权限信息失效</li>
    </ul>
  </li>
  <li>可以应用于一般项目</li>
</ol>

<h2 id="2-技术选型">2. 技术选型</h2>
<ul>
  <li>前端
    <ul>
      <li>Vue + ElementUI 用于快速搭建页面</li>
      <li>axios 用于前后端交互</li>
      <li>vuex 用于状态管理</li>
      <li>vue-router 用于路由管理</li>
    </ul>
  </li>
  <li>后端
    <ul>
      <li>Spring Boot 用于快速搭建后端</li>
      <li>Spring Security 用于权限控制</li>
      <li>Gateway 用于统一进行权限校验，路由转发</li>
      <li>Eureka 用于服务注册与发现</li>
      <li>JWT 用于用户认证</li>
      <li>MyBatis 用于数据库操作</li>
      <li>MySQL 用于存储数据</li>
      <li>Redis 用于存储用户的token黑名单等信息</li>
    </ul>
  </li>
  <li>其他说明
    <ul>
      <li>上述几个技术栈在本项目中使用的版本为: vue 2.x, jdk 1.8, spring boot 2.x, mysql 8.x, redis 3.x</li>
    </ul>
  </li>
</ul>

<h2 id="3-系统设计">3. 系统设计</h2>
<h3 id="31-数据库设计">3.1 数据库设计</h3>
<h4 id="311-mysql">3.1.1 mysql</h4>
<p>包括用户表、角色表、权限表、用户角色关联表、角色权限关联表等，属于比较常规的设计，以下是需要说明的几点：</p>
<ol>
  <li>数据库遵循只增不删的原则，即删除操作只做逻辑删除，不做物理删除。所以user和role表中都有一个字段<code class="language-plaintext highlighter-rouge">status</code>，用于标记是否删除</li>
  <li>权限表中的数据直接写死，不提供修改的接口，且在后端代码中以常量的形式存在，可以方便使用例如<code class="language-plaintext highlighter-rouge">@PreAuthorize("hasAuthority('XXX')")</code>这样的注解来进行权限校验</li>
  <li>考虑到可能会有多个系统，所以在权限表中增加了一个字段<code class="language-plaintext highlighter-rouge">platform</code>，用于标记权限所属的系统，判断用户是否有权限进入某个系统则是通过判断用户是否有该系统的权限来实现</li>
</ol>

<h4 id="312-redis">3.1.2 redis</h4>
<p>本项目采用jwt作为用户认证的方式，在快要过期的时候会给前端返回一个新的token，而自然过期的token由于可以直接使用jwt的verify方法来校验，所以不需要存储在redis中。在用户修改密码、权限或角色被修改、用户退出登录等情况下，需要立即使旧的token失效，这时候就需要将旧的token或者其他信息存储在redis中，以便在校验token的时候进行判断。基于此，本项目在redis中存储了以下几个信息：</p>

<ol>
  <li>token黑名单：
    <ul>
      <li>存储内容：存储了所有已经失效的token，主要是退出登录的token。</li>
      <li>存储方式：使用0号库，key为失效的token，value为空字符串</li>
      <li>过期时间：token的自然过期时间减去当前时间</li>
      <li>使用方式：在校验token的时候，先判断token是否在黑名单中，如果在则说明用户试图使用一个已经失效的token，直接返回401</li>
    </ul>
  </li>
  <li>需要刷新权限的用户：
    <ul>
      <li>存储内容：存储了所有需要刷新权限的用户的id（修改了密码、管理员修改了用户的角色或权限）</li>
      <li>存储方式：使用1号库，key为用户id，value为(当前时间+token默认过期时长)</li>
      <li>过期时间：token默认过期时长</li>
      <li>使用方式：在校验token的时候，先判断用户是否在需要刷新权限的用户中，如果在则判断当前的token过期时间是否小于value，如果小于则说明该token是在权限更新前签发的，需要重新签发一个新的token给用户</li>
    </ul>
  </li>
  <li>刷新token表(可选，当用户一次发送多个请求又恰好需要更换token时，可以避免重复签发token)：
    <ul>
      <li>存储内容：存储了即将过期的token</li>
      <li>存储方式：使用2号库，key为即将过期的token，value为新的token</li>
      <li>过期时间：旧token的自然过期时间减去当前时间</li>
      <li>使用方式：判断用户token是否即将过期，如果是则判断用户的token是否在刷新token表中，如果在则直接将value作为新的token返回给用户，否则生成一个新的token并存储在刷新token表中</li>
    </ul>
  </li>
</ol>

<h3 id="32-后端设计">3.2 后端设计</h3>
<p>系统的整体流程如下图所示：
<img src="/post_assets/images/2024/06/16-backend-structure.png" alt="系统流程图" /></p>

<ol>
  <li>
    <p>网关gateway会校验并解析用户的token，如果token在3.1.2中的黑名单中则直接返回401，如果user_id在3.1.2中的需要刷新权限的用户中且判断为需要刷新权限则根据具体需求签发新的token给用户或者直接返回401强制用户重新登录。如果token即将过期，则请求依旧传递到下游服务，不过会在请求头中添加新的token并返回给前端。如果token已经过期，则说明用户长时间未登录或长时间未操作，直接返回401强制用户重新登录。校验完token后，gateway会将token解析出来的用户信息传递给下游服务，如果没有token也是传递给下游服务（毕竟有些接口不需要登录就可以访问）。</p>
  </li>
  <li>
    <p>从gateway传递过来的用户信息会最先到达Security的过滤器，在这里会根据用户信息设置权限，设置用户信息上下文，没有登录则设置一个匿名用户。如果匿名用户试图访问不在白名单中的接口则直接返回401。为了提高性能，这些权限都是从上一步的token解析出来的，不需要查询数据库（jwt有签名可以有效防止token中的内容伪造）。</p>
  </li>
  <li>
    <p>在Security的过滤器之后，请求会到达具体的controller，一般的请求默认权限是登录用户可以访问，如果需要允许匿名用户访问则需要在controller或者方法上添加<code class="language-plaintext highlighter-rouge">@PermitAll</code>注解，或者在Security的配置类中添加<code class="language-plaintext highlighter-rouge">http.authorizeRequests().antMatchers("/xxx").permitAll()</code>。如果需要特定权限才能访问，则需要在controller或者方法上添加<code class="language-plaintext highlighter-rouge">@PreAuthorize</code>注解，例如<code class="language-plaintext highlighter-rouge">@PreAuthorize("hasAuthority('XXX')")</code>。</p>
  </li>
</ol>

<h3 id="33-前端设计">3.3 前端设计</h3>
<h4 id="331-动态路由">3.3.1 动态路由</h4>
<p>根据用户具体的角色和权限信息来生成对应的路由，不具有特定权限的用户或者游客则访问不到对应的页面。具体的实现方式是在前端请求登录接口成功后，将用户的角色和权限信息存储在vuex中，然后根据这些信息生成对应的路由（路由列表事先写好了各自需要的权限），最后将这些路由添加到vue-router中。这样就可以实现动态路由的功能。
前端项目基于vue-element-admin进行开发，其中已经实现了动态路由的功能，所以这个部分只需要根据具体需求进行修改即可。</p>

<h4 id="332-权限刷新">3.3.2 权限刷新</h4>
<p>用户首次登录时会签发一个token给用户，将token保存在localStorage中，每次请求都会将token放在请求头中(axios的请求拦截器中设置)，后端会校验token的合法性。在本项目中约定后端返回401状态码时，前端会清除用户信息并退回到登录页面。返回403状态码时，前端会刷新页面重新获取用户信息保存到vuex中，然后重新发起请求。这样就可以实现权限实时更新的功能。</p>

<h2 id="4-接入其他系统">4. 接入其他系统</h2>
<p>本项目的权限管理系统可以应用于一般的项目，源代码见<a href="#5-源代码">5源代码</a>。如果需要将本项目接入到其他系统中，需要进行以下几个步骤。</p>

<h3 id="41-后端">4.1 后端</h3>
<ol>
  <li>依赖项版本核对
    <ul>
      <li>确保spring boot版本一致</li>
      <li>确保根目录的pom.xml中各依赖项版本与目标项目一致或尽量接近</li>
      <li>如果版本没有问题且依赖项没有冲突，则可以将当前管理后端移入目标后端中，否则需要作为一个独立的后端模块运行。</li>
    </ul>
  </li>
  <li>将各子模块复制到目标后端项目中
    <ul>
      <li>将gateway（网关模块），common（公用模块）user（用户管理模块）移入目标后端项目。如果依赖项版本不兼容则忽略此步骤，将本项目作为一个独立的后端模块运行即可。</li>
    </ul>
  </li>
  <li>修改网关配置
    <ul>
      <li>将各子模块都注册到同一个eureka服务，并在gateway中的配置路由转发（当后端版本不兼容时该步骤也可以进行）。具体配置可以参考gateway模块的application.yml文件。</li>
    </ul>
  </li>
  <li>修改数据库配置
    <ul>
      <li>按具体需求调整用户表中的字段，并预置好若干角色和权限。</li>
      <li>后端的common模块中有一些角色和权限的常量（在enum或constants包中），可以根据具体需求进行修改。</li>
    </ul>
  </li>
  <li>配置security
    <ul>
      <li>使用公共模块common中的security工具类给各子模块配置好过滤器，并使用security的注解(<code class="language-plaintext highlighter-rouge">@PreAuthorize</code>, <code class="language-plaintext highlighter-rouge">@PermitAll</code>)给每个接口配置权限。</li>
    </ul>
  </li>
</ol>

<h3 id="42-前端">4.2 前端</h3>
<ol>
  <li>本项目管理系统前端
    <ul>
      <li>根据后端的调整，修改api接口的地址和参数</li>
      <li>根据用户表、角色表、权限表的调整，修改前端src/views/user目录下的用户管理、角色管理、权限管理的页面中的表单结构和表格结构</li>
      <li>根据权限的调整，修改src/router/index.js中的路由表，在其中的meta中添加权限字段，根据权限动态生成路由</li>
    </ul>
  </li>
  <li>接入的其他系统的前端
    <ul>
      <li>可参考本项目管理前端的方式，根据前端使用的具体技术栈来根据需求选择性的实现动态路由和权限刷新的功能</li>
    </ul>
  </li>
</ol>

<h2 id="5-源代码">5. 源代码</h2>
<p>本项目的源代码已经上传到github，地址为：<a href="https://github.com/lxmghct/user-role-admin">https://github.com/lxmghct/user-role-admin</a></p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="技术探索" /><category term="vue" /><category term="spring" /><category term="security" /><summary type="html"><![CDATA[1. 需求分析 设计一个用户权限管理系统，模型为RBAC（Role-Based Access Control），按用户-角色-权限的层次结构进行权限管理。该项目的主要功能有：]]></summary></entry><entry><title type="html">neo4j报错Property values can only be of primitive types or arrays thereof</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/14/neo4j%E6%8A%A5%E9%94%99Property-values-can-only-be-of-primitive-types-or-arrays-thereof.html" rel="alternate" type="text/html" title="neo4j报错Property values can only be of primitive types or arrays thereof" /><published>2024-06-14T11:30:00+00:00</published><updated>2024-06-14T11:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/14/neo4j%E6%8A%A5%E9%94%99Property%20values%20can%20only%20be%20of%20primitive%20types%20or%20arrays%20thereof</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/14/neo4j%E6%8A%A5%E9%94%99Property-values-can-only-be-of-primitive-types-or-arrays-thereof.html"><![CDATA[<p>报错内容：”Property values can only be of primitive types or arrays thereof”</p>

<p>报错代码如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Query</span><span class="o">(</span><span class="s">"UNWIND {auditNodes} AS auditNode "</span> <span class="o">+</span>
        <span class="s">"MERGE (n:Audit:BaseNode {nodeId: auditNode.nodeId}) "</span> <span class="o">+</span>
        <span class="s">"ON CREATE SET n = auditNode "</span> <span class="o">+</span>
        <span class="s">"ON MATCH SET n += auditNode{.*, createTime: n.createTime, createBy: n.createBy, editors: n.editors} "</span> <span class="o">+</span>
        <span class="s">"WITH n "</span> <span class="o">+</span>
        <span class="s">"SET n.editors = CASE WHEN n.editors IS NULL THEN [{userId}] ELSE "</span> <span class="o">+</span>
        <span class="s">"CASE WHEN NOT {userId} IN n.editors THEN n.editors + {userId} ELSE n.editors END END"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">saveAuditNodes</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">AuditNode</span><span class="o">&gt;</span> <span class="n">auditNodes</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">userId</span><span class="o">);</span>
</code></pre></div></div>

<p>原因：neo4j 中不支持直接将含<code class="language-plaintext highlighter-rouge">NULL</code>的数组赋值给属性，上述代码中<code class="language-plaintext highlighter-rouge">userId</code>可能为<code class="language-plaintext highlighter-rouge">NULL</code>，所以会报错。</p>

<p>解决方案：在进入查询前先对<code class="language-plaintext highlighter-rouge">userId</code>进行判空处理，或者在查询语句中将<code class="language-plaintext highlighter-rouge">[{userId}]</code> 改为 <code class="language-plaintext highlighter-rouge">[] + {userId}</code>，这种情况下<code class="language-plaintext highlighter-rouge">userId</code>为<code class="language-plaintext highlighter-rouge">NULL</code>时，该赋值语句会被忽略。即使列表中有内容比如<code class="language-plaintext highlighter-rouge">[1,2,3] + NULL</code>，也会被忽略（该语句完全不执行，1,2,3也不会被添加到列表中）。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="neo4j" /><summary type="html"><![CDATA[报错内容：”Property values can only be of primitive types or arrays thereof”]]></summary></entry><entry><title type="html">判断ip是内网还是外网</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/02/%E5%88%A4%E6%96%ADip%E6%98%AF%E5%86%85%E7%BD%91%E8%BF%98%E6%98%AF%E5%A4%96%E7%BD%91.html" rel="alternate" type="text/html" title="判断ip是内网还是外网" /><published>2024-06-02T04:30:00+00:00</published><updated>2024-06-02T04:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/02/%E5%88%A4%E6%96%ADip%E6%98%AF%E5%86%85%E7%BD%91%E8%BF%98%E6%98%AF%E5%A4%96%E7%BD%91</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/06/02/%E5%88%A4%E6%96%ADip%E6%98%AF%E5%86%85%E7%BD%91%E8%BF%98%E6%98%AF%E5%A4%96%E7%BD%91.html"><![CDATA[<p>内网IP的范围<br />
Class A: 10.0.0.0 到 10.255.255.255<br />
Class B: 172.16.0.0 到 172.31.255.255<br />
Class C: 192.168.0.0 到 192.168.255.255</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IpChecker</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Pattern</span> <span class="no">PRIVATE_IP_PATTERN</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span>
            <span class="s">"^(10\\.([0-9]{1,3}\\.){2}[0-9]{1,3})|"</span> <span class="o">+</span>
                    <span class="s">"(172\\.(1[6-9]|2[0-9]|3[01])\\.([0-9]{1,3}\\.){1}[0-9]{1,3})|"</span> <span class="o">+</span>
                    <span class="s">"(192\\.168\\.([0-9]{1,3}\\.){1}[0-9]{1,3})$"</span>
    <span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPrivateIP</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PRIVATE_IP_PATTERN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">ip</span><span class="o">).</span><span class="na">matches</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="java" /><summary type="html"><![CDATA[内网IP的范围 Class A: 10.0.0.0 到 10.255.255.255 Class B: 172.16.0.0 到 172.31.255.255 Class C: 192.168.0.0 到 192.168.255.255]]></summary></entry><entry><title type="html">python剪辑音频</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/26/python%E5%89%AA%E8%BE%91%E9%9F%B3%E9%A2%91.html" rel="alternate" type="text/html" title="python剪辑音频" /><published>2024-05-26T04:30:00+00:00</published><updated>2024-05-26T04:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/26/python%E5%89%AA%E8%BE%91%E9%9F%B3%E9%A2%91</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/26/python%E5%89%AA%E8%BE%91%E9%9F%B3%E9%A2%91.html"><![CDATA[<h2 id="1-安装-ffmpeg">1. 安装 ffmpeg</h2>
<p>前往官网下载 ffmpeg，<a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a>。配置好环境变量。</p>

<h2 id="2-安装-pydub-simpleaudio">2. 安装 pydub, simpleaudio</h2>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>pydub simpleaudio
</code></pre></div></div>

<h2 id="3-剪辑音频">3. 剪辑音频</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pydub</span> <span class="kn">import</span> <span class="n">AudioSegment</span>

<span class="k">def</span> <span class="nf">clip_audio</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">output_path</span><span class="p">,</span> <span class="n">start_time_ms</span><span class="p">,</span> <span class="n">end_time_ms</span><span class="p">):</span>
    <span class="c1"># 加载音频文件
</span>    <span class="n">audio</span> <span class="o">=</span> <span class="n">AudioSegment</span><span class="p">.</span><span class="nf">from_wav</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    
    <span class="c1"># 剪辑指定时间段的音频
</span>    <span class="n">clipped_audio</span> <span class="o">=</span> <span class="n">audio</span><span class="p">[</span><span class="n">start_time_ms</span><span class="p">:</span><span class="n">end_time_ms</span><span class="p">]</span>
    
    <span class="c1"># 保存剪辑后的音频文件
</span>    <span class="n">clipped_audio</span><span class="p">.</span><span class="nf">export</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">wav</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 示例使用
</span><span class="n">input_wav</span> <span class="o">=</span> <span class="sh">"</span><span class="s">input.wav</span><span class="sh">"</span>  <span class="c1"># 输入WAV文件路径
</span><span class="n">output_wav</span> <span class="o">=</span> <span class="sh">"</span><span class="s">clipped_output.wav</span><span class="sh">"</span>  <span class="c1"># 输出剪辑后文件路径
</span><span class="n">start_time</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">1000</span>  <span class="c1"># 起始时间（毫秒）
</span><span class="n">end_time</span> <span class="o">=</span> <span class="mi">35</span> <span class="o">*</span> <span class="mi">1000</span>  <span class="c1"># 结束时间（毫秒）
</span><span class="nf">clip_audio</span><span class="p">(</span><span class="n">input_wav</span><span class="p">,</span> <span class="n">output_wav</span><span class="p">,</span> <span class="n">start_time</span><span class="p">,</span> <span class="n">end_time</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="python" /><summary type="html"><![CDATA[1. 安装 ffmpeg 前往官网下载 ffmpeg，https://ffmpeg.org/download.html。配置好环境变量。]]></summary></entry><entry><title type="html">neo4j数据备份报错</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/25/neo4j%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%8A%A5%E9%94%99.html" rel="alternate" type="text/html" title="neo4j数据备份报错" /><published>2024-05-25T02:30:00+00:00</published><updated>2024-05-25T02:30:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/25/neo4j%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%8A%A5%E9%94%99</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/25/neo4j%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%8A%A5%E9%94%99.html"><![CDATA[<h2 id="问题描述">问题描述</h2>
<p>在使用 neo4j 3.5 版本时，停止数据库后并使用<code class="language-plaintext highlighter-rouge">neo4j-admin</code>备份数据库时，报错如下：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">command </span>failed: Active logical log detected, this might be a <span class="nb">source </span>of inconsistencies.
Please recover database.
To perform recovery please start database <span class="k">in </span>single mode and perform clean shutdown.
</code></pre></div></div>

<h2 id="解决方法">解决方法</h2>
<ol>
  <li>确保数据库已经停止</li>
  <li>在单用户模式下启动数据库，修改<code class="language-plaintext highlighter-rouge">neo4j.conf</code>文件，添加或修改如下配置：
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dbms.mode<span class="o">=</span>single
</code></pre></div>    </div>
  </li>
  <li>重启数据库后再停止，然后注释掉<code class="language-plaintext highlighter-rouge">dbms.mode=single</code>配置，再进行备份操作（该方法尝试过但还是报错）。而在<code class="language-plaintext highlighter-rouge">dbms.mode=single</code>模式下，直接使用<code class="language-plaintext highlighter-rouge">neo4j-admin</code>备份数据库则可以成功。</li>
</ol>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="neo4j" /><summary type="html"><![CDATA[问题描述 在使用 neo4j 3.5 版本时，停止数据库后并使用neo4j-admin备份数据库时，报错如下： command failed: Active logical log detected, this might be a source of inconsistencies. Please recover database. To perform recovery please start database in single mode and perform clean shutdown.]]></summary></entry><entry><title type="html">redis存储ip段问题</title><link href="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/24/redis%E5%AD%98%E5%82%A8ip%E6%AE%B5%E9%97%AE%E9%A2%98.html" rel="alternate" type="text/html" title="redis存储ip段问题" /><published>2024-05-24T01:45:00+00:00</published><updated>2024-05-24T01:45:00+00:00</updated><id>/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/24/redis%E5%AD%98%E5%82%A8ip%E6%AE%B5%E9%97%AE%E9%A2%98</id><content type="html" xml:base="/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/2024/05/24/redis%E5%AD%98%E5%82%A8ip%E6%AE%B5%E9%97%AE%E9%A2%98.html"><![CDATA[<h2 id="问题描述">问题描述</h2>
<p>有个需求是根据 ip 来获取对应的用户，从而让 ip 地址匹配的用户进行自动登录等操作。想到的解决方式是将 ip -&gt; userId 的映射关系存储到 redis 中，然后根据 ip 获取对应的 userId。</p>

<p>ip 工具类如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IpUtils</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">parseIpRange</span><span class="o">(</span><span class="nc">String</span> <span class="n">ipRange</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">ipRange</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">";"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">part</span> <span class="o">:</span> <span class="n">parts</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"-"</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">String</span><span class="o">[]</span> <span class="n">range</span> <span class="o">=</span> <span class="n">part</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"-"</span><span class="o">);</span>
                <span class="nc">String</span> <span class="n">startIp</span> <span class="o">=</span> <span class="n">range</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">();</span>
                <span class="nc">String</span> <span class="n">endIp</span> <span class="o">=</span> <span class="n">range</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">();</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">rangeIps</span> <span class="o">=</span> <span class="n">generateRangeIps</span><span class="o">(</span><span class="n">startIp</span><span class="o">,</span> <span class="n">endIp</span><span class="o">);</span>
                <span class="n">ips</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">rangeIps</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">trim</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">generateRangeIps</span><span class="o">(</span><span class="nc">String</span> <span class="n">startIp</span><span class="o">,</span> <span class="nc">String</span> <span class="n">endIp</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">startParts</span> <span class="o">=</span> <span class="n">startIp</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">endParts</span> <span class="o">=</span> <span class="n">endIp</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">intStartParts</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">startParts</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">intEndParts</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">endParts</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>

        <span class="k">do</span> <span class="o">{</span>
            <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">intStartParts</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">).</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">)));</span>
            <span class="n">plusIp</span><span class="o">(</span><span class="n">intStartParts</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">compareIp</span><span class="o">(</span><span class="n">intStartParts</span><span class="o">,</span> <span class="n">intEndParts</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">intStartParts</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">intEndParts</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ips</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">compareIp</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]</span> <span class="n">ip1</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">[]</span> <span class="n">ip2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">ip1</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">ip2</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">ip1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">ip2</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">plusIp</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ip</span><span class="o">[</span><span class="mi">3</span><span class="o">]++;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ip</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ip</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="n">ip</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>jedis 工具类如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.JedisPool</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.Pipeline</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JedisUtils</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JedisPool</span> <span class="n">jedisPool</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">JedisUtils</span> <span class="n">self</span><span class="o">;</span>

    <span class="c1">// 过期时间为2小时</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">EXPIRE_SECONDS</span> <span class="o">=</span> <span class="mi">7200</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">JedisUtils</span><span class="o">(</span><span class="nc">JedisPool</span> <span class="n">jedisPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jedisPool</span> <span class="o">=</span> <span class="n">jedisPool</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">self</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 批量删除redis中的key
     *
     * @param keys key列表
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">batchDeleteKey</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">pipeline</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 批量插入redis中的key-value
     *
     * @param keyValues key-value列表
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">batchInsertKeyValues</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">keyValues</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">keyValues</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">pipeline</span><span class="o">.</span><span class="na">setex</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="no">EXPIRE_SECONDS</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 使用lua脚本清空所有数据并批量插入新数据，确保原子性
     *
     * @param keyValues key-value列表
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">flushAllAndBatchInsertKeyValues</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">keyValues</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">StringBuilder</span> <span class="n">scriptBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
            <span class="n">scriptBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"redis.call('FLUSHDB');"</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">keyValues</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">scriptBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"redis.call('SETEX', '"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"', "</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="no">EXPIRE_SECONDS</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">", '"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"');"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">jedis</span><span class="o">.</span><span class="na">eval</span><span class="o">(</span><span class="n">scriptBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>使用示例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">ipRange</span> <span class="o">=</span> <span class="s">"192.168.2.2-192.168.3.4;192.168.3.3"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="s">"123"</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="nc">IpUtils</span><span class="o">.</span><span class="na">parseIpRange</span><span class="o">(</span><span class="n">ipRange</span><span class="o">);</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">keyValues</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">ip</span> <span class="o">:</span> <span class="n">ips</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">keyValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ip</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">JedisUtils</span><span class="o">.</span><span class="na">flushAllAndBatchInsertKeyValues</span><span class="o">(</span><span class="n">keyValues</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>但上述代码存在一个问题，如果 ip 段很大，比如 10.0.0.1-192.168.0.1，那么生成的 ip 列表会非常大，约(192-10) * 256^3 数量级达到了上亿，这样的数据量无论是生成还是存储都是非常大的开销。因此需要优化存储方式。</p>

<h2 id="优化方案">优化方案</h2>
<p>由原来的存储每个 ip 改为存储 ip 段，startIp -&gt; endIp:userId，这样可以减少存储的数据量。为了提高性能，使用有序集合 zset 来存储 startIp，同时 ip 采用整数形式存储，通过或运算将 ip 转换为整数，这样可以方便比较大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.JedisPool</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">redis.clients.jedis.Pipeline</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IpRangeStore</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JedisPool</span> <span class="n">jedisPool</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">IpRangeStore</span> <span class="n">self</span><span class="o">;</span>

    <span class="c1">// 过期时间为2小时</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">EXPIRE_SECONDS</span> <span class="o">=</span> <span class="mi">7200</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">IpRangeStore</span><span class="o">(</span><span class="nc">JedisPool</span> <span class="n">jedisPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jedisPool</span> <span class="o">=</span> <span class="n">jedisPool</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">self</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 批量添加ip段
     *
     * @param ipUserIdMap  ip段-用户id映射
     * @param deleteOrigin 是否删除原数据
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">batchAddIpRanges</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">ipUserIdMap</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">deleteOrigin</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">deleteOrigin</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">pipeline</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">ipUserIdMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">ipString</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">ipString</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"-"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">String</span><span class="o">[]</span> <span class="n">ipRange</span> <span class="o">=</span> <span class="n">ipString</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"-"</span><span class="o">);</span>
                    <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">ipToLong</span><span class="o">(</span><span class="n">ipRange</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
                    <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">ipToLong</span><span class="o">(</span><span class="n">ipRange</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
                    <span class="n">pipeline</span><span class="o">.</span><span class="na">zadd</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="kt">long</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">ipToLong</span><span class="o">(</span><span class="n">ipString</span><span class="o">);</span>
                    <span class="n">pipeline</span><span class="o">.</span><span class="na">zadd</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">,</span> <span class="n">ip</span><span class="o">,</span> <span class="n">ip</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">expire</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">,</span> <span class="no">EXPIRE_SECONDS</span><span class="o">);</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 批量删除指定IP
     *
     * @param ips 要删除的IP列表
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">batchDeleteIpRanges</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">ip</span> <span class="o">:</span> <span class="n">ips</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">pipeline</span><span class="o">.</span><span class="na">zrem</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">,</span> <span class="n">ip</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="nf">findUserIdByIp</span><span class="o">(</span><span class="nc">String</span> <span class="n">ipAddress</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">self</span><span class="o">.</span><span class="na">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">findUserIdByIp</span><span class="o">(</span><span class="n">ipAddress</span><span class="o">,</span> <span class="n">jedis</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">userId</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">ipToLong</span><span class="o">(</span><span class="nc">String</span> <span class="n">ipAddress</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipParts</span> <span class="o">=</span> <span class="n">ipAddress</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">ip</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">ipPart</span> <span class="o">:</span> <span class="n">ipParts</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ip</span> <span class="o">&lt;&lt;=</span> <span class="mi">8</span><span class="o">;</span>
            <span class="n">ip</span> <span class="o">|=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ipPart</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ip</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findUserIdByIp</span><span class="o">(</span><span class="nc">String</span> <span class="n">ipAddress</span><span class="o">,</span> <span class="nc">Jedis</span> <span class="n">jedis</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">ipToLong</span><span class="o">(</span><span class="n">ipAddress</span><span class="o">);</span>
        <span class="c1">// 查询ip_ranges中离ip最近且小于等于ip的ip段</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">zrevrangeByScore</span><span class="o">(</span><span class="s">"ip_ranges"</span><span class="o">,</span> <span class="n">ip</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">results</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">&gt;=</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="编程随笔" /><category term="redis" /><category term="spring" /><summary type="html"><![CDATA[问题描述 有个需求是根据 ip 来获取对应的用户，从而让 ip 地址匹配的用户进行自动登录等操作。想到的解决方式是将 ip -&gt; userId 的映射关系存储到 redis 中，然后根据 ip 获取对应的 userId。]]></summary></entry><entry><title type="html">提取rtf文件中的高亮文本</title><link href="/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/04/22/%E6%8F%90%E5%8F%96rtf%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%AB%98%E4%BA%AE%E6%96%87%E6%9C%AC.html" rel="alternate" type="text/html" title="提取rtf文件中的高亮文本" /><published>2024-04-22T07:30:00+00:00</published><updated>2024-04-22T07:30:00+00:00</updated><id>/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/04/22/%E6%8F%90%E5%8F%96rtf%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%AB%98%E4%BA%AE%E6%96%87%E6%9C%AC</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/2024/04/22/%E6%8F%90%E5%8F%96rtf%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%AB%98%E4%BA%AE%E6%96%87%E6%9C%AC.html"><![CDATA[<h2 id="1-问题描述">1. 问题描述</h2>
<p>我最近需要处理一个 rtf 格式的命名实体识别的数据集，其中包含了一些高亮文本，不同的颜色代表不同的实体类型。我需要提取这些高亮文本，以便后续处理。</p>

<p>rtf 文件中的内容如图所示：
<img src="/post_assets/images/2024/04/22-rtf-example.png" alt="rtf文件内容" /></p>

<p>而 rtf 的格式比较复杂，下面是使用文本编辑器打开的 rtf 文件的内容：</p>

<pre><code class="language-rtf">{\rtf1\ansi\ansicpg936\deff0\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fprq2\fcharset134 \'cb\'ce\'cc\'e5;}{\f1\fswiss\fcharset238{\*\fname Arial;}Arial CE;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red34\green177\blue76;\red255\green242\blue0;\red237\green28\blue36;\red214\green214\blue214;\red185\green122\blue87;\red63\green72\blue204;\red255\green174\blue201;\red163\green73\blue164;}
\viewkind4\uc1\pard\lang2052\f0\fs30\par

\'d7\'d3\'d3\'ce\'a3\'ba\cf5\highlight6\'bf\'d7\'d7\'d3\cf0\highlight0\'b5\'c4\'d6\'f8\'c3\'fb\'b5\'dc\'d7\'d3\'a3\'ac\'d0\'d5\'d1\'d4\'a3\'ac\'c3\'fb\'d9\'c8\'a3\'ac\'d7\'d6\'d7\'d3\'d3\'ce\'a3\'ac\'d2\'e0\'b3\'c6\ldblquote\'d1\'d4\'d3\'ce\rdblquote\ldblquote\'ca\'e5\'ca\'cf\rdblquote\'a3\'ac\cf4\highlight7\'b4\'ba\'c7\'ef\cf0\highlight0\'c4\'a9\cf8\highlight9\b\'ce\'e2\'b9\'fa\cf0\highlight0\b0\'c8\'cb\'a3\'ac\'d3\'eb\cf5\highlight6\'d7\'d3\'cf\'c4\cf0\highlight0\'a1\'a2\cf5\highlight6\b\'d7\'d3\'d5\'c5\cf0\highlight0\b0\'c6\'eb\'c3\'fb\'a3\'ac\ldblquote\cf3\highlight4\ul\b\'bf\'d7\'c3\'c5\'ca\'ae\'d5\'dc\cf0\highlight0\ulnone\b0\rdblquote\'d6\'ae\'d2\'bb\'a3\'ac\'d4\'f8\'ce\'aa\cf8\highlight9\b\'ce\'e4\'b3\'c7\cf2\highlight10\'d4\'d7\cf0\highlight0\b0\'a1\'a3\'d7\'c8\'ba\'f1\'a3\'ba\'d7\'cc\'c8\'f3\'d4\'f3\'b1\'bb\'a1\'a3\'d7\'c8\'a3\'ac\'cd\'a8\ldblquote\'d7\'cc\rdblquote\'a1\'a3\fs18\par
}

</code></pre>
<p>可以看到如果直接读取 rtf 文件的内容，工作量会比较大。所以需要借助一些工具来处理 rtf 文件。</p>

<h2 id="2-方法探索">2. 方法探索</h2>
<p>一开始根据 chatgpt 的建议使用了 Python 的 Rtf15Reader 或者 PyRTF 来处理 rtf 文件，其中使用了 Rtf15Reader 的部分代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pyth.plugins.rtf15.reader</span> <span class="kn">import</span> <span class="n">Rtf15Reader</span>
<span class="kn">from</span> <span class="n">pyth.plugins.plaintext.writer</span> <span class="kn">import</span> <span class="n">PlaintextWriter</span>
<span class="n">doc</span> <span class="o">=</span> <span class="n">Rtf15Reader</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">rtf_content</span><span class="p">)</span>
<span class="n">text</span> <span class="o">=</span> <span class="n">PlaintextWriter</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">doc</span><span class="p">).</span><span class="nf">getvalue</span><span class="p">()</span>
</code></pre></div></div>

<p>但是这两个库都无法正确从我目前使用的 rtf 文件中提取高亮文本，由于我对 rtf 文件的格式也不是很了解，所以我也不知道这两个库无法正确处理的原因。</p>

<h2 id="3-解决方案">3. 解决方案</h2>
<p>由于直接处理不好处理，所以我打算把 rtf 文件转换成 html 文件，然后再从 html 文件中提取高亮文本，毕竟自己对 html 文件比较了解，更容易提取出其中的高亮文本。</p>

<h3 id="31-rtf-转-html">3.1. rtf 转 html</h3>

<p>转换方式是使用 Python 的 win32 模块来调用 Word 来打开 rtf 文件并保存为 html 文件。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">win32com.client</span> <span class="k">as</span> <span class="n">win32</span>
<span class="kn">import</span> <span class="n">codecs</span>
<span class="kn">import</span> <span class="n">shutil</span>

<span class="c1"># 创建一个Word应用对象
</span><span class="n">word</span> <span class="o">=</span> <span class="n">win32</span><span class="p">.</span><span class="n">gencache</span><span class="p">.</span><span class="nc">EnsureDispatch</span><span class="p">(</span><span class="sh">'</span><span class="s">Word.Application</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 获取文件夹中的所有文件
</span><span class="n">rtf_folder</span> <span class="o">=</span> <span class="sh">'</span><span class="s">rtf</span><span class="sh">'</span>
<span class="n">html_folder</span> <span class="o">=</span> <span class="sh">'</span><span class="s">html</span><span class="sh">'</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">html_folder</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">html_folder</span><span class="p">)</span>

<span class="n">current_folder</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>

<span class="c1"># 先获取一下rtf文件夹的所有文件，防止word打开时出现文件夹中有临时文件的情况
# 不然有可能会报错: pywintypes.com_error: (-2147352567, '发生意外。', (0, 'Microsoft Word', '很抱歉，找不到您的文件。该项目是否已移动、重命名或删除?\r (D:\\projects\\python\\...\\rtf\\~$015.rtf)', 'wdmain11.chm', 24654, -2146823114), None)
</span><span class="n">rtf_files</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">rtf_folder</span><span class="p">)</span>

<span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">rtf_files</span><span class="p">:</span>
    <span class="c1"># 检查文件是否是RTF文件
</span>    <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.rtf</span><span class="sh">'</span><span class="p">):</span>
        <span class="c1"># 获取文件的完整路径
</span>        <span class="n">rtf_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">current_folder</span><span class="p">,</span> <span class="n">rtf_folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
        <span class="c1"># 打开RTF文件
</span>        <span class="n">doc</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">Documents</span><span class="p">.</span><span class="nc">Open</span><span class="p">(</span><span class="n">rtf_path</span><span class="p">)</span>
        <span class="c1"># 另存为HTML
</span>        <span class="n">wdFormatHTML</span> <span class="o">=</span> <span class="mi">8</span> <span class="c1"># Word的HTML格式常数
</span>        <span class="n">html_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">current_folder</span><span class="p">,</span> <span class="n">html_folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">.rtf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.html</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">doc</span><span class="p">.</span><span class="nc">SaveAs</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="n">FileFormat</span><span class="o">=</span><span class="n">wdFormatHTML</span><span class="p">)</span>
            <span class="c1"># 关闭文档
</span>            <span class="n">doc</span><span class="p">.</span><span class="nc">Close</span><span class="p">()</span>
            <span class="c1"># 以UTF-8编码保存HTML文件
</span>            <span class="k">with</span> <span class="n">codecs</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">gbk</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">codecs</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Error File:</span><span class="sh">'</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="c1"># 移除错误的html文件, 包括xxx.html和xxx.files目录
</span>            <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">html_path</span><span class="p">)</span>
            <span class="n">shutil</span><span class="p">.</span><span class="nf">rmtree</span><span class="p">(</span><span class="n">html_path</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">.html</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.files</span><span class="sh">'</span><span class="p">),</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">continue</span>

<span class="c1"># 关闭Word应用
</span><span class="n">word</span><span class="p">.</span><span class="nc">Quit</span><span class="p">()</span>
</code></pre></div></div>

<p>上述代码中有两个需要注意的地方：</p>
<ol>
  <li>由于 Word 打开 rtf 文件时会生成一些临时文件，如果直接使用<code class="language-plaintext highlighter-rouge">os.listdir</code>获取文件列表，可能会读取到这些临时文件从而导致报错，所以需要先获取文件列表，然后再处理文件。</li>
  <li>由于 Word 保存 html 文件时默认使用 gbk 编码，不方便后续处理，所以需要读取后再以 utf-8 编码保存。此时如果使用浏览器打开 html 文件，可能会出现乱码，但是不影响后续处理。</li>
</ol>

<h3 id="32-提取高亮文本">3.2. 提取高亮文本</h3>
<p>读取上一步生成的 html 文件，解析带有<code class="language-plaintext highlighter-rouge">background</code>属性的<code class="language-plaintext highlighter-rouge">span</code>标签，提取其中的文本。html 的格式大概如下：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"WordSection1"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"MsoNormal"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span&gt;</span>other text<span class="nt">&lt;/span&gt;</span>
        <span class="c">&lt;!-- 高亮文本在b标签内 --&gt;</span>
        <span class="nt">&lt;b&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"..."</span><span class="nt">&gt;&lt;/span&gt;</span>
        <span class="nt">&lt;/b&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>在读取 html 方面，js 具有一定优势，所以采用 nodejs 来处理 html 文件。cheerio 是一个类似 jQuery 的库，可以方便地解析 html 文件。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">cheerio</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">parseHtmlFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">readFileSync</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>

  <span class="kd">let</span> <span class="nx">wordIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">allText</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="c1">// 高亮颜色与类型的对应关系</span>
  <span class="kd">const</span> <span class="nx">colorMap</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">silver</span><span class="p">:</span> <span class="dl">"</span><span class="s2">人物</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">yellow</span><span class="p">:</span> <span class="dl">"</span><span class="s2">知识点</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">aqua</span><span class="p">:</span> <span class="dl">"</span><span class="s2">朝代</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">red</span><span class="p">:</span> <span class="dl">"</span><span class="s2">文献</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lime</span><span class="p">:</span> <span class="dl">"</span><span class="s2">事件</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">gray</span><span class="p">:</span> <span class="dl">"</span><span class="s2">官职</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">fuchsia</span><span class="p">:</span> <span class="dl">"</span><span class="s2">地名</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">resultMap</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">.MsoNormal</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">children</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">each</span><span class="p">((</span><span class="nx">i</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// 依次遍历子元素</span>
      <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="nx">elem</span><span class="p">).</span><span class="nf">text</span><span class="p">();</span>
      <span class="nx">allText</span> <span class="o">+=</span> <span class="nx">text</span><span class="p">;</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">elem</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 找到高亮文本</span>
        <span class="kd">const</span> <span class="nx">span</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="nx">elem</span><span class="p">).</span><span class="nf">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">span</span><span class="dl">"</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">style</span> <span class="o">=</span> <span class="nx">span</span><span class="p">.</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">style</span><span class="dl">"</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">style</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/background:</span><span class="se">(</span><span class="sr">.*</span><span class="se">?)(</span><span class="sr">;|$</span><span class="se">)</span><span class="sr">/</span><span class="p">);</span> <span class="c1">// (;|$) 匹配分号或者字符串结尾</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">let</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
          <span class="nx">color</span> <span class="o">=</span> <span class="nx">colorMap</span><span class="p">[</span><span class="nx">color</span><span class="p">]</span> <span class="o">||</span> <span class="nx">color</span><span class="p">;</span>
          <span class="kd">const</span> <span class="nx">spanText</span> <span class="o">=</span> <span class="nx">span</span><span class="p">.</span><span class="nf">text</span><span class="p">();</span>
          <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">resultMap</span><span class="p">[</span><span class="nx">color</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">resultMap</span><span class="p">[</span><span class="nx">color</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="p">}</span>
          <span class="nx">resultMap</span><span class="p">[</span><span class="nx">color</span><span class="p">].</span><span class="nf">push</span><span class="p">({</span>
            <span class="na">text</span><span class="p">:</span> <span class="nx">spanText</span><span class="p">,</span>
            <span class="na">start</span><span class="p">:</span> <span class="nx">wordIndex</span><span class="p">,</span>
            <span class="na">end</span><span class="p">:</span> <span class="nx">wordIndex</span> <span class="o">+</span> <span class="nx">spanText</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
          <span class="p">});</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">wordIndex</span> <span class="o">+=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="p">});</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">content</span><span class="p">:</span> <span class="nx">allText</span><span class="p">,</span>
    <span class="na">resultMap</span><span class="p">:</span> <span class="nx">resultMap</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">parseHtmlFilesInDirectory</span><span class="p">(</span><span class="nx">dirPath</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">readdirSync</span><span class="p">(</span><span class="nx">dirPath</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">file</span> <span class="k">of</span> <span class="nx">files</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nf">extname</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">.html</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">filePath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">dirPath</span><span class="p">,</span> <span class="nx">file</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">parseHtmlFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">);</span>
      <span class="nx">results</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">result</span> <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">dirPath</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">html</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nf">parseHtmlFilesInDirectory</span><span class="p">(</span><span class="nx">dirPath</span><span class="p">);</span>

<span class="cm">/**
 * 输出示例结果
 * @param {*} results
 */</span>
<span class="kd">function</span> <span class="nf">getExampleOutput</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">outputDir</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">html-output</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">fs</span><span class="p">.</span><span class="nf">existsSync</span><span class="p">(</span><span class="nx">outputDir</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">mkdirSync</span><span class="p">(</span><span class="nx">outputDir</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// 写入到文件, utf-8 编码格式</span>
  <span class="c1">// fs.writeFileSync('result.json', JSON.stringify(results, null, 2), 'utf-8');</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">{</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">result</span> <span class="p">}</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">writeFileSync</span><span class="p">(</span>
      <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">outputDir</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">.html</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.json</span><span class="dl">"</span><span class="p">)),</span>
      <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
      <span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 * 输出doccano格式结果, jsonl格式
 * {"id": 1, "text": "text", "labels": [[0, 4, "label"]]}
 * @param {*} results
 */</span>
<span class="kd">function</span> <span class="nf">getDoccanoOutput</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">doccanoOutputDir</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">doccano-output</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">fs</span><span class="p">.</span><span class="nf">existsSync</span><span class="p">(</span><span class="nx">doccanoOutputDir</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nf">mkdirSync</span><span class="p">(</span><span class="nx">doccanoOutputDir</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">jsonlData</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">{</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">result</span> <span class="p">}</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">.html</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">content</span><span class="p">,</span> <span class="nx">resultMap</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">labels</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">resultMap</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="nx">resultMap</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
      <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">labels</span><span class="p">.</span><span class="nf">push</span><span class="p">([</span><span class="nx">item</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span> <span class="nx">key</span><span class="p">]);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// 按照起始位置排序</span>
    <span class="nx">labels</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nx">jsonlData</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span>
      <span class="nx">id</span><span class="p">,</span>
      <span class="na">text</span><span class="p">:</span> <span class="nx">content</span><span class="p">,</span>
      <span class="na">label</span><span class="p">:</span> <span class="nx">labels</span><span class="p">,</span>
      <span class="na">Comments</span><span class="p">:</span> <span class="p">[],</span>
    <span class="p">});</span>
  <span class="p">}</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nf">writeFileSync</span><span class="p">(</span>
    <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">doccanoOutputDir</span><span class="p">,</span> <span class="dl">"</span><span class="s2">data.jsonl</span><span class="dl">"</span><span class="p">),</span>
    <span class="nx">jsonlData</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">item</span><span class="p">)).</span><span class="nf">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">),</span>
    <span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// getExampleOutput(results);</span>
<span class="nf">getDoccanoOutput</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</code></pre></div></div>

<p>检测背景色采用了正则表达式，匹配<code class="language-plaintext highlighter-rouge">background</code>属性的值，然后根据颜色值来判断高亮文本的类型。上面的<code class="language-plaintext highlighter-rouge">colorMap</code>是颜色值与类型的对应关系，是通过事先输出所有的颜色和对应的文本，从而分析出来的。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="技术探索" /><category term="python" /><category term="nodejs" /><summary type="html"><![CDATA[1. 问题描述 我最近需要处理一个 rtf 格式的命名实体识别的数据集，其中包含了一些高亮文本，不同的颜色代表不同的实体类型。我需要提取这些高亮文本，以便后续处理。]]></summary></entry><entry><title type="html">spring gateway统一配置过滤器</title><link href="/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/2024/04/21/spring-gateway%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8.html" rel="alternate" type="text/html" title="spring gateway统一配置过滤器" /><published>2024-04-21T15:30:00+00:00</published><updated>2024-04-21T15:30:00+00:00</updated><id>/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/2024/04/21/spring%20gateway%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8</id><content type="html" xml:base="/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/2024/04/21/spring-gateway%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8.html"><![CDATA[<p>在使用spring gateway时，我想给每个转发的路由都添加几个过滤器，但是不想每个路由都添加一遍，所以想到了统一配置过滤器。</p>

<p>下面是application.yml配置文件的内容，由于在其他地方统一配置了过滤器，所以这里不需要再写filters字段。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">gateway</span><span class="pi">:</span>
      <span class="na">routes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">test</span>
          <span class="na">uri</span><span class="pi">:</span> <span class="s">lb://test</span>
          <span class="na">predicates</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">Path=/api/test/**</span>
        <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">user</span>
          <span class="na">uri</span><span class="pi">:</span> <span class="s">lb://user</span>
          <span class="na">predicates</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">Path=/api/user/**</span>
</code></pre></div></div>

<p>这里假定已经配置好了PreGatewayFilterFactory和PostGatewayFilterFactory两个过滤器：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// filter/PreGatewayFilterFactory.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreGatewayFilterFactory</span> <span class="kd">extends</span> <span class="nc">AbstractGatewayFilterFactory</span><span class="o">&lt;</span><span class="nc">PreGatewayFilterFactory</span><span class="o">.</span><span class="na">Config</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="c1">// filter/PostGatewayFilterFactory.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostGatewayFilterFactory</span> <span class="kd">extends</span> <span class="nc">AbstractGatewayFilterFactory</span><span class="o">&lt;</span><span class="nc">PostGatewayFilterFactory</span><span class="o">.</span><span class="na">Config</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下面是统一配置过滤器的代码：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config/GatewayFilterConfig.java</span>
<span class="kn">import</span> <span class="nn">org.springframework.cloud.gateway.filter.FilterDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.cloud.gateway.route.RouteDefinitionLocator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.cloud.gateway.route.RouteLocator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GatewayConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RouteDefinitionLocator</span> <span class="n">routeDefinitionLocator</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GatewayConfig</span><span class="o">(</span><span class="nc">RouteDefinitionLocator</span> <span class="n">routeDefinitionLocator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">routeDefinitionLocator</span> <span class="o">=</span> <span class="n">routeDefinitionLocator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RouteLocator</span> <span class="nf">customRouteLocator</span><span class="o">(</span><span class="nc">RouteLocatorBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 获取所有在application.yml中配置的路由定义</span>
        <span class="n">routeDefinitionLocator</span><span class="o">.</span><span class="na">getRouteDefinitions</span><span class="o">().</span><span class="na">subscribe</span><span class="o">(</span><span class="n">routeDefinition</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// 为每个路由添加几个额外的过滤器</span>
            <span class="n">routeDefinition</span><span class="o">.</span><span class="na">getFilters</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">FilterDefinition</span><span class="o">(</span><span class="s">"Pre"</span><span class="o">));</span>
            <span class="n">routeDefinition</span><span class="o">.</span><span class="na">getFilters</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">FilterDefinition</span><span class="o">(</span><span class="s">"Post"</span><span class="o">));</span>
            <span class="c1">// 去掉路径中的前两个段</span>
            <span class="n">routeDefinition</span><span class="o">.</span><span class="na">getFilters</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">FilterDefinition</span><span class="o">(</span><span class="s">"RewritePath=/(?&lt;segment1&gt;[^/]*)/(?&lt;segment2&gt;[^/]*)/(?&lt;segment3&gt;.*)$, /$\\{segment3}"</span><span class="o">));</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">routes</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码添加了Pre和Post两个过滤器，以及一个RewritePath过滤器，用来去掉路径中的前两个段。这样就可以在application.yml中配置路由，然后在GatewayConfig中统一添加过滤器。</p>]]></content><author><name>Long, Xiaoming</name><email>lxmghct@gmail.com</email></author><category term="开发日志" /><category term="spring" /><summary type="html"><![CDATA[在使用spring gateway时，我想给每个转发的路由都添加几个过滤器，但是不想每个路由都添加一遍，所以想到了统一配置过滤器。]]></summary></entry></feed>